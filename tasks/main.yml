---
# Copyright 2015, Jean-Philippe Evrard <jean-philippe@evrard.me>
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

- name: Gather variables for each operating system
  ansible.builtin.include_vars: "{{ item }}"
  with_first_found:
    - "{{ ansible_distribution | lower }}-{{ ansible_distribution_version | lower }}.yml"
    - "{{ ansible_distribution | lower }}-{{ ansible_distribution_major_version | lower }}.yml"
    - "{{ ansible_os_family | lower }}-{{ ansible_distribution_major_version | lower }}.yml"
    - "{{ ansible_distribution | lower }}.yml"
    - "{{ ansible_os_family | lower }}.yml"
  tags:
    - always

- name: configure SELinux
  ansible.builtin.include_tasks:
    file: keepalived_selinux.yml
  when:
    - keepalived_selinux_compile_rules | length > 0
    - ansible_selinux.status is defined
    - ansible_selinux.status == "enabled"
  tags:
    - keepalived-config

- name: install keepalived package(s)
  ansible.builtin.package:
    name: "{{ [keepalived_package_name] + keepalived_scripts_packages }}"
    state: "{{ keepalived_package_state }}"
    update_cache: "{{ (ansible_pkg_mgr == 'apt') | ternary('yes', omit) }}"
    cache_valid_time: "{{ (ansible_pkg_mgr == 'apt') | ternary(cache_timeout, omit) }}"
  tags:
    - keepalived-apt-packages
    - keepalived-packages
  notify:
    - restart keepalived

- name: Ensure no new "samples" folder appeared
  ansible.builtin.file:
    path: /etc/keepalived/samples/
    state: absent
  when:
    - ansible_os_family | lower == 'debian'

- name: Get IPv6 enabled state
  ansible.builtin.slurp:
    src: /sys/module/ipv6/parameters/disable
  register: _ipv6_disabled
  tags:
    - keepalived-install

- name: Check if IPv6 is enabled
  ansible.builtin.set_fact:
    ipv6_enabled: "{{ not _ipv6_disabled.failed and '0' in (_ipv6_disabled.content | b64decode) }}"
  tags:
    - keepalived-install

- name: Allow consuming apps to bind on non local addresses for IPv4
  ansible.posix.sysctl:
    name: "{{ item.name }}"
    value: "{{ item.value }}"
    sysctl_set: yes
    state: present
  when: keepalived_bind_on_non_local | bool
  loop:
    - name: "net.ipv4.ip_nonlocal_bind"
      value: 1
    - name: "net.ipv4.tcp_retries2"
      value: "{{ keepalived_sysctl_tcp_retries }}"
  tags:
    - keepalived-install

- name: Allow consuming apps to bind on non local addresses for IPv6
  ansible.posix.sysctl:
    name: "{{ item.name }}"
    value: "{{ item.value }}"
    sysctl_set: yes
    state: present
  when: keepalived_bind_on_non_local | bool
        and ipv6_enabled
  loop:
    - name: "net.ipv6.ip_nonlocal_bind"
      value: 1
  tags:
    - keepalived-install

- name: Configure keepalived
  ansible.builtin.template:
    src: keepalived.conf.j2
    dest: "{{ keepalived_config_file_path }}"
    mode: "0640"
  tags:
    - keepalived-config
  notify:
    - reload keepalived

- name: Check that daemon options file exists
  ansible.builtin.stat:
    path: "{{ keepalived_daemon_options_file_path }}"
  register: keepalived_daemon_options_file
  tags:
    - keepalived-config

- name: Configure keepalived extra params
  ansible.builtin.lineinfile:
    line: "{{ item }}"
    regexp: "^{{ item.split('=')[0] }}"
    dest: "{{ keepalived_daemon_options_file_path }}"
    state: present
  loop: "{{ keepalived_daemon_default_options_overrides }}"
  when: keepalived_daemon_options_file.stat.exists
  tags:
    - keepalived-config
  notify:
    - restart keepalived

- name: Drop additional files
  ansible.builtin.include_tasks:
    file: drop_files.yml
  tags:
    - keepalived-config

- name: Make directory for keepalived's systemd overrides
  ansible.builtin.file:
    path: /etc/systemd/system/keepalived.service.d/
    state: directory
    mode: "0755"
  when:
    - keepalived_systemd_overrides | bool

- name: Apply keepalived override to start after network is up
  community.general.ini_file:
    path: /etc/systemd/system/keepalived.service.d/override.conf
    create: yes
    section: 'Unit'
    option: "{{ item }}"
    value: 'network-online.target'
    mode: '0644'
  loop:
    - 'Wants'
    - 'After'
  when:
    - keepalived_systemd_overrides | bool
  notify:
    - restart keepalived

- name: Apply keepalived override to restart service always
  community.general.ini_file:
    path: /etc/systemd/system/keepalived.service.d/override.conf
    section: 'Service'
    option: "Restart"
    value: 'always'
    mode: '0644'
  when:
    - keepalived_systemd_overrides | bool
    - keepalived_systemd_override_service_restart | bool
  notify:
    - restart keepalived

- name: Remove keepalived overrides
  ansible.builtin.file:
    path: /etc/systemd/system/keepalived.service.d/override.conf
    state: absent
  when:
    - not (keepalived_systemd_overrides | bool)

# Until  https://github.com/ansible/ansible/pull/72337 is fixed, we need to not use
# the service/systemd module.
#- name: Ensuring keepalived is enabled
#  service:
#    daemon_reload: yes
#    name: "{{ keepalived_service_name }}"
#    enabled: "yes"
#    masked: "no"
#

# Reload systemd is necessary if new packages, or changes of overrides.
# Because there is no notify on those tasks, and that the notify would be happening after the
# task to ensure keepalived is enabled, move it to an unconditional task here.
# When the bug above is fixed with the service/systemd module, ensure everything is
# done in a single handler, tackling the daemon-reloads and the restart of the service,
# plus a single task, handling the daemon-reload and ensuring the service is enabled
# on the first install (the changes in systemd files would have to trigger the
# handler to restart the service).
- name: Check if keepalived is enabled
  ansible.builtin.shell: "systemctl daemon-reload && systemctl is-enabled {{ keepalived_service_name }}"
  register: isenabled
  changed_when: (isenabled.stdout == "disabled" or isenabled.stdout == "masked") and isenabled.rc != 0
  failed_when: (isenabled.stdout != "disabled" and isenabled.stdout != "masked") and isenabled.rc != 0
  tags:
    - skip_ansible_lint

- name: Unmask keepalived if necessary
  ansible.builtin.command: "systemctl unmask {{ keepalived_service_name }}"
  when:
    - isenabled is changed
    - isenabled.stdout == "masked"
  tags:
    - skip_ansible_lint

- name: ensure keepalived is enabled
  ansible.builtin.command: "systemctl enable {{ keepalived_service_name }} --now"
  when:
    - isenabled is changed
  tags:
    - skip_ansible_lint
